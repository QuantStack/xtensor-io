parameters:
  - name: 'platform'
    type: string

steps:
  - script: |
      conda config --set always_yes yes --set changeps1 no
      conda update -q conda
      conda env create --file environment-dev.yml
    displayName: Install dependencies

  - script: |
      source activate xtensor-io
      conda install gxx_linux-64 libgcc -c conda-forge
    condition: eq('${{ parameters.platform }}', 'Linux')
    displayName: Install conda-forge compilers

  - script: |
      source activate xtensor-io
      conda install tbb==2020.2 -c conda-forge
    condition: eq('${{ parameters.platform }}', 'OSX')
    displayName: Workaround missing TBB

  - script: |
      source activate xtensor-io
      export LDFLAGS="${LDFLAGS} -Wl,-rpath,$CONDA_PREFIX/lib"
      export LINKFLAGS="${LDFLAGS}"
      mkdir build
      cd build
      cmake -DCMAKE_PREFIX_PATH=$CONDA_PREFIX -DCMAKE_INSTALL_PREFIX=$CONDA_PREFIX -DDOWNLOAD_GTEST=ON -DCMAKE_INSTALL_LIBDIR=lib -DCMAKE_C_COMPILER=$CC -DCMAKE_CXX_COMPILER=$CXX -DHAVE_ALL_DEPS=ON $(Build.SourcesDirectory)

    displayName: Configure xtensor-io
    workingDirectory: $(Build.BinariesDirectory)

  - script: |
      source activate xtensor-io
      python -c 'import struct, zlib; open("files/test.zl", "wb").write(zlib.compress(struct.pack("4d", 3.0, 2.0, 1.0, 0.0), level=1))'
    displayName: Generate data for zlib test
    workingDirectory: $(Build.BinariesDirectory)/build/test

  - script: |
      source activate xtensor-io
      export GTEST_FILTER="-xio_gdal_handler.read_vsigs"
      make -j2 xtest
    displayName: Build and run xtensor-io tests
    workingDirectory: $(Build.BinariesDirectory)/build
